1. Pasikuriam nauja projekta, prisidedam git ir github
bent vienas modulinis js failas su kazkokiu funkcionalumu + index.js

2. Inicializuoti npm: npm init

3. Instaliuojam webPack: npm install webpack webpack-cli --save-dev  (cli - command line interface)

4. Susikuriam .gitignore faila ir i ji irasom node_module, ir dist kad siu failu gitas nesektu

5. Pridedam webpack konfiguracijos faila: webpack.dev.js
Pakeiciam scripta, kad start script'as paleidzia dev konfiguracija
"start: : "webpack --config  webpack.dev.js"

6. Instaliuojam Html generavimo plugin is webpack: https://webpack.js.org/plugins/html-webpack-plugin/:
npm install --save-dev html-webpack-plugin

Basic Usage: (webpack.dev.js faile) inicijuojam plugina confige ir nurodom jam naudoti musu template.html

const HtmlWebpackPlugin = require('html-webpack-plugin');
const path = require('path');

module.exports = {
  entry: 'index.js',
  output: {
    path: path.resolve(__dirname, './dist'),
    filename: 'index_bundle.js',
  },
  plugins: [new HtmlWebpackPlugin()],
};

susitvarkom output:
output: { filename: "bundle.js", path: path.resolve(__dirname, "dist"), clean: true }


7. CSS  - pluginus instaliuojam: https://webpack.js.org/guides/asset-management/#loading-css
npm install --save-dev style-loader css-loader
prideti taisykle kad css failams naudoti css loader

8.Babel instaliuojam Babel-loader:https://webpack.js.org/loaders/babel-loader/ 

npm install -D babel-loader @babel/core @babel/preset-env

padarom taisykle: (visi js ir mjs failai naudos babel)
module: {
  rules: [
    {
      test: /\.m?js$/,
      exclude: /(node_modules|bower_components)/,
      use: {
        loader: 'babel-loader',
        options: {
          presets: ['@babel/preset-env']
        }
      }
    }
  ]
}

9.  I module.exports = { // irasom devtool:"source-map"
  mode: "development", 
  devtool: "source-map", // galima matyti is kurio failo koks kodas atejo(consol.log'e tarkim, kad nerodytu kad atejo is main js)


10. Dev server isirasom i webPack.dev.js faila: https://webpack.js.org/configuration/dev-server/#root

npm install --save-dev webpack-dev-server

const path = require('path');

module.exports = {
  //...
  devServer: {
    contentBase: path.join(__dirname, 'dist'),
    compress: true,
    port: 9000,
  },
};
scripte prirasyti "serve", pasidarom, kad 'npm run serve' paleistu localu serveri darbui:

"serve": "webpack serve --config webpack.dev.js --open", tada galesim atsidaryti per npm run serve komanda

kad atidaryti serveri naudojam: npx webpack serve --open




IMG - prie module, rules pridedam taisykle: 
{
        test: /\.(png|svg|jpe?g|gif)$/i,
        type: "asset/resource",
      },


I output po clean ikeliam: assetModuleFilename: "images/[name][ext]", taip nurodysim paveiksleliu talpinimo vieta


Parsisiunciam ImageMinimizerWebpackPlugin: https://webpack.js.org/plugins/image-minimizer-webpack-plugin/

Instaliuojam plugin'a: npm install image-minimizer-webpack-plugin --save-dev

img gali buti optimizuojant dviem budais:
1.Lossless (without loss of quality).
2. Lossy (with loss of quality).

instaliuojam lossy:

npm install imagemin-gifsicle imagemin-mozjpeg imagemin-pngquant imagemin-svgo --save-dev

arba lossless:
npm install imagemin-gifsicle imagemin-jpegtran imagemin-optipng imagemin-svgo --save-dev

Webpac.dev.js faile iskvieciam plugin'a:

const ImageMinimizerPlugin = require('image-minimizer-webpack-plugin');

I plugins ikeliam: plugins: [

    new ImageMinimizerPlugin({
      minimizerOptions: {
        // Lossless optimization with custom option
        // Feel free to experiment with options for better result for you
        plugins: [
          ["gifsicle", { quality: true }],
          ["mozjpeg", { quality: 50 }],
          ["pngquant", { quality: [0.5, 0.7] }],
          ["svgo"],
        ],
      },
    }),



11. CSS mimimize: https://webpack.js.org/plugins/css-minimizer-webpack-plugin/

instaliuojam plugina: npm install css-minimizer-webpack-plugin --save-dev
taip pat:
npm install --save-dev mini-css-extract-plugin

isikeliam plug'ina i webpack :

const MiniCssExtractPlugin = require('mini-css-extract-plugin');

ir const CssMinimizerPlugin = require('css-minimizer-webpack-plugin'); // minimizeris sutrauks css faila

tada i module export plugins:
plugins: [new MiniCssExtractPlugin()],


upgradint css loader:
//css loader
      {
        test: /.s?css$/, //pritaikkm.css failams
        use: [MiniCssExtractPlugin.loader, "css-loader"], // uzkraunam css
      },
      

po plugins idedam:

optimization: {
    minimizer: [
      // For webpack@5 you can use the `...` syntax to extend existing minimizers (i.e. `terser-webpack-plugin`), uncomment the next line
      // `...`,
      new CssMinimizerPlugin(),
    ],
  },

situ plaginu reikes tik production dalyje

12. Pasikopijuojam webpack.dev.js ir pasidarom production faila webpack.prod.js. :

pasidarom pakeitimus production faile:

devtool: false, 
mode: "production",

is development failo istrinam:

const ImageMinimizerPlugin = require("image-minimizer-webpack-plugin"); // naudosim tik productione

new ImageMinimizerPlugin({
      minimizerOptions: {
        // Lossless optimization with custom option
        // Feel free to experiment with options for better result for you
        plugins: [
          ["gifsicle", { quality: true }],
          ["mozjpeg", { quality: 50 }],
          ["pngquant", { quality: [0.5, 0.7] }],
          ["svgo"],
        ],
      },
    }),

taip pat:

devServer: {
    contentBase: path.join(__dirname, "dist"),
    port: 8080,
    hot: true, // css reload nereloadinant html. pas mane veikia ir be to
  },


13. ESLINT - pracheckina projekta ir paziuri ar yra kokiu netikslumu, neaiskumu ar nepanaudotu dalyku, kuriuos galim uzkomentuot istrint ar pan. Production faile naudosim, nes developinant nenorim, kad istisai klaidas rodytu https://webpack.js.org/plugins/eslint-webpack-plugin/#root

Instaliuojam webpack linta: 
npm install eslint-webpack-plugin --save-dev

tada pati linta:
npm install eslint --save-dev

tada You should then set up a configuration file: (terminale irasyti)

node ./node_modules/.bin/eslint --init arba jei neveikia tai be node priekyje

tada issirenkiam viena is pasirinkimu 
  To check syntax only
  To check syntax and find problems
❯ To check syntax, find problems, and enforce code style  

✔ How would you like to use ESLint? · style
? What type of modules does your project use? … 
❯ JavaScript modules (import/export)
  CommonJS (require/exports)
  None of these

  ? Which framework does your project use? … 
  React
  Vue.js
❯ None of these

? Does your project use TypeScript? › No / Yes

? Where does your code run? …  (Press <space> to select, <a> to toggle all, <i> to invert selection)
✔ Browser
✔ Node


❯ Use a popular style guide
  Answer questions about your style
  Inspect your JavaScript file(s) 

populiarus:
  Airbnb: https://github.com/airbnb/javascript
  Standard: https://github.com/standard/standard
  Google: https://github.com/google/eslint-config-google
  XO: https://github.com/xojs/eslint-config-xo

? What format do you want your config file to be in? … 
❯ JavaScript
  YAML
  JSON

eslint-config-airbnb-base@latest eslint@^5.16.0 || ^6.8.0 || ^7.2.0 eslint-plugin-import@^2.22.1
? Would you like to install them now with npm? › No / Yes

yes - instaliuojam reikaloingus plugins, kad airbnb veiktu stilius

tada einam i https://www.npmjs.com/package/eslint

You can install ESLint using npm:
$ npm install eslint --save-dev

You should then set up a configuration file:
$ ./node_modules/.bin/eslint --init

After that, you can run ESLint on any file or directory like this:
$ ./node_modules/.bin/eslint yourfile.js


naudojimas: const ESLintPlugin = require('eslint-webpack-plugin');

module.exports = {
  // ...
  plugins: [new ESLintPlugin(options)],
  // ...
};


14. // post css plugin - kad pridetu reikalingus webkit pagal narsyle ir versija
npm install --save-dev postcss postcss-loader postcss-preset-env


.browserslistrc
last 2 versions //imam paskutines 2 narsykliu versijas
> 0.5% // bandom palaikyti 99.5% narsykliu 
IE 9 // bandom prideti palaikyma internet explorer 9
